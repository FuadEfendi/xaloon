<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Overview</title>
	<section>
		<title>Licence</title>
		<para>Apache License 2.0</para>
	</section>
	<section>
		<title>Introduction</title>
		<para>xaloon is an application development and integration tool for apache wicket. Main focus of
			xaloon is to start wicket development easily with predefined requirements. Maven
			archetypes provide an easy way to generate a project template with built-in modules,
			such as spring, JPA, security, dynamic menu, automatic page mounting and other features.
			xaloon core api provides common interfaces which are used in mostly all applications.
			xaloon plugins provide additional functionality and tool extensibility  features.</para>
	</section>
	<section>
		<title>Architecture</title>
		<para> Overall xaloon architecture diagram displays list of modules and module dependency graph.
			All common interfaces are defined in xaloon core api module. xaloon core api provides
			interfaces for persistence, caching, security, plugin management, other modules as well
			as already built-in set of plugins (blog, photo gallery, external authentication, google
			related services). </para>
		<para>
			<figure>
			<title>overall xaloon architecture</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="media/architecture-1.png" width="400" align="center"></imagedata>
				</imageobject>
			</mediaobject>
			</figure>
		</para>
		<para> Detailed api architecture displayes interfaces, supported by xaloon. It also displays
			default implementations and exposed architectural levels to project developers. Three
			levels are exposed: core api interfaces, xaloon wicket components and xaloon plugins.
			Usually end project developer should not deal with custom implementation of persistence
			or security interface but there are always exceptional cases, such as custom security
			implementation using LDAP, different caching mechanism should be used, other reasons.
			Custom implementation might be provided without any code refactoring. xaloon api makes
			things realy light weight, easy to customize. </para>
		<para>
			<figure>
				<title>xaloon api detailed architecture</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="media/architecture-2.png" width="400" align="center"></imagedata>
					</imageobject>
				</mediaobject>
			</figure>
		</para>
		<para>Detailed architecture by module is described in section <command linkend="xaloon-core-api">xaloon core api.</command></para>
		<para>xaloon uses JEE generic annotations. This makes xaloon based project ready to deploy into JEE platform. There are some exceptions, 
			which cannot be so easily ported from Spring to JEE, but major xaloon requirements are covered.
		</para>
		<para>
			Supported JEE annotations:
		</para>
		<itemizedlist>
			<listitem>
				<para>Dependency injection</para>
				<itemizedlist>
					<listitem><programlisting>javax.inject.Inject</programlisting></listitem>
					<listitem><programlisting>javax.inject.Named</programlisting></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>Transaction management</para>
				<itemizedlist>
					<listitem><programlisting>javax.ejb.TransactionAttribute</programlisting></listitem>
					<listitem><programlisting>javax.ejb.TransactionManagement</programlisting></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>Security roles for wicket pages</para>
				<itemizedlist>
					<listitem><programlisting>javax.annotation.security.RolesAllowed</programlisting></listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>		
		<para>
			Why developer should use these annotations? Migration from spring based application to JEE platform may be performed easier when using common annotations. Testing might be easier performed on container based
			application server and later deployed into JEE platform with just a minimum maven deployment descriptors.
		</para>
	</section>
	<section>
		<title>System requirements and integrated packages</title>
		<section>
			<title>Requirements</title>
			<para>Java Runtime: A JDK or JRE version 6 or greater. You can download a Java Runtime for Windows/Linux/Solaris <link xlink:href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">here</link>.</para>	
		</section>
		<section>
			<title>Supported platforms</title>
			<para>Supported servlet containers and application servers:</para>
			<itemizedlist>
				<listitem>
					<para><link xlink:href="http://tomcat.apache.org/">Apache tomcat</link> 7.x</para>
				</listitem>
				<listitem>
					<para><link xlink:href="http://jetty.codehaus.org/jetty/">Jetty</link> 7.x</para>
				</listitem>
				<listitem>
					<para><link xlink:href="http://www.jboss.org/jbossas">Jboss</link> 7.0.2 and higher</para>
				</listitem>
				<listitem>
					<para><link xlink:href="http://glassfish.java.net/">Glassfish</link> 3.1.1</para>
				</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>Integrated packages</title>
			
			<para>xaloon has several options how it might be configured - xaloon profiles. All profiles include such features:</para>
			<itemizedlist>
				<listitem>
					<para><link xlink:href="http://wicket.apache.org/">Apache Wicket</link> 1.5.x</para>
				</listitem>
				<listitem>
					<para><link xlink:href="http://code.google.com/p/jqwicket/">JQWicket</link> 0.8 as jQuery provider</para>
				</listitem>
			</itemizedlist>
			<section>
				<title>xaloon with spring, eclipselink and shiro security</title>
				<programlisting language="java"><![CDATA[
	<dependency>
		<groupId>org.xaloon.profiles</groupId>
		<artifactId>xaloon-profiles-eclipselink-shiro</artifactId>
		<version>1.5.0</version>
		<type>pom</type>
	</dependency>
	]]></programlisting>
				<para>This configuration includes:</para>
				<itemizedlist>
					<listitem>
						<para><link xlink:href="http://www.springsource.org/">Spring</link> 3.1 for Dependency injection</para>
					</listitem>
					<listitem>
						<para><link xlink:href="http://www.eclipse.org/eclipselink/">EclipseLink</link> 2.2.0 for ORM</para>
					</listitem>
					<listitem>
						<para><link xlink:href="http://shiro.apache.org/">Apache Shiro</link> 1.1.0 for Security</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>
		<section>
			<title>xaloon with spring, hibernate</title>
			<programlisting language="java"><![CDATA[
<dependency>
	<groupId>org.xaloon.profiles</groupId>
	<artifactId>xaloon-profiles-hibernate-spring</artifactId>
	<version>1.5.0</version>
	<type>pom</type>
</dependency>			
]]></programlisting>
			<para>This configuration includes:</para>
			<itemizedlist>
				<listitem>
					<para><link xlink:href="http://www.springsource.org/">Spring</link> 3.1 for Dependency injection and Security</para>
				</listitem>
				<listitem>
					<para><link xlink:href="http://www.hibernate.org/">Hibernate</link> 4.x for ORM</para>
				</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>xaloon java ee and shiro security</title>
			<programlisting language="java"><![CDATA[
<dependency>
	<groupId>org.xaloon.profiles</groupId>
	<artifactId>xaloon-profiles-jee</artifactId>
	<version>1.5.0</version>
	<type>pom</type>
</dependency>
]]></programlisting>
			<para>This configuration includes:</para>
			<itemizedlist>
				<listitem>
					<para>Default Java EE Dependency injection is used</para>
				</listitem>
				<listitem>
					<para>Default ORM provider is used</para>
				</listitem>
				<listitem>
					<para><link xlink:href="http://shiro.apache.org/">Apache Shiro</link> 1.1.0 for security</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
</chapter>
